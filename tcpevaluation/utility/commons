### common definitions


### constants

# iperf
readonly IPERF_PORT=5001
# ping (to check connection)
readonly PING_TIMEOUT=3 # sec
# TCP congestion algorithms
readonly TCP_ALGO_PATH='/proc/sys/net/ipv4'
readonly TCP_ALGO_AVAILABLE="$TCP_ALGO_PATH/tcp_available_congestion_control"
readonly TCP_ALGO_ALLOWED="$TCP_ALGO_PATH/tcp_allowed_congestion_control"
readonly TCP_ALGO_PREFIX='tcp_'
readonly TCP_ALGO_SUFFIX=""
# modules
readonly MODULE_SUFFIX='.ko'


### variables

_usage_='Usage:\n'


### functions

# print messages to standard output
E_INFOQ () { echo -n "\033[1;30m>\033[0;36m>\033[1;36m> \033[0m${*}" ; }
E_INFO () { E_INFOQ "${*}\n" ; }
E_WARNQ () { echo -n "\033[1;30m>\033[0;33m>\033[1;33m> \033[0m${*}" ; }
E_WARN () { E_WARNQ "${*}\n" ; }

# print messages to standard error
E_ERRQ () { echo -n "\033[1;30m>\033[0;31m>\033[1;31m> ${*}\033[0m" >&2 ; }
E_ERR () { E_ERR "${*}\n" ; }

# print messages to standard error and exit
E_FATAL () { echo -n "\033[1;30m>\033[0;31m>\033[1;31m> FATAL ERROR in ${0##*/}: ${*}\033[0m\n" >&2; exit 254 ; }

# show usage
show_usage () {
    local name="$0"
    if [ -n "$_usage_" ]; then
        E_INFO "$_usage_" >&2 # to stderr
        # remove after the first time
        _usage_=""
    fi
    E_INFO "\t$name  $*" >&2 # to stderr
}

# return true iff the effective user ID is 0 (root)
is_root () {
    [ "$(id -u)" = 0 ]
}

# exit if the user does not have root privileges
assert_root () {
    is_root ||
        E_FATAL 'Root privileges required!'
}

# return true iff a given module is loaded
is_loaded () {
    local module_name="$1"
    lsmod | grep "^${module_name}\>" > /dev/null
}

# return true iff the congestion algorithm is available
is_congestion_algorithm_available () {
    local algo="$1"
    grep "\<$algo\>" "$TCP_ALGO_AVAILABLE" > /dev/null
}

# return true iff the congestion algorithm is available and allowed
is_congestion_algorithm_ready () {
    local algo="$1"
    is_congestion_algorithm_available "$algo" &&
    grep "\<$algo\>" "$TCP_ALGO_ALLOWED" > /dev/null
}

# return true iff the congestion algorithm is loadable
is_congestion_algorithm_loadable () {
    /sbin/modprobe -l | grep "\<${TCP_ALGO_PREFIX}${algo}${MODULE_SUFFIX}\>" > /dev/null
}

# return true iff the congestion algorithm is available or loadable
is_congestion_algorithm_supported () {
    local algo="$1"
    is_congestion_algorithm_available "$algo" ||
    is_congestion_algorithm_loadable "$algo"
}

# load a TCP congestion algorithm module provided by the operating system
load_tcp_module () {
    local module="$1"
    local tcp_module
    local command
    # check module
    is_congestion_algorithm_loadable "$module" ||
        E_FATAL "module $module not found!"
    # load
    shift
    tcp_module="${TCP_ALGO_PREFIX}${module}${TCP_ALGO_SUFFIX}"
    command='modprobe -- "${tcp_module}" "$@"'
    if is_root; then 
        eval "$command" > /dev/null
    else
        eval sudo "$command" > /dev/null
    fi ||
        E_FATAL "loading of ${tcp_module} failed with exit status ${?}!"
}

# load a kernel module provided by the framework
load_module () {
    local module_file="./modules/$1"
    local command
    # check module
    [ -f "$module_file" ] ||
        E_FATAL "module \"$module_file\" not found!"
    # load
    shift
    command='insmod "$module_file" "$@"'
    if is_root; then 
        eval "$command" > /dev/null
    else
        eval sudo "$command" > /dev/null
    fi ||
        E_FATAL "loading of \"$module_file\" failed with exit status ${?}!"
}

# kill a process and wait for its termination
kill_pid () {
    local pid="$1"
    kill -s TERM -- "$pid"
    wait "$pid" 2> /dev/null || true # exit status always true
}

# ping an host once, waiting for at most $PING_TIMEOUT s
is_connected () {
    local ip="$1"
    ping -c 1 -W "$PING_TIMEOUT" "$ip" > /dev/null
}

# make the directory, if it does not yet exist
make_dir () {
    local dir="$1"
    if [ ! -d "$dir" ]; then
        mkdir -- "$dir" || E_FATAL "Unable to make the directory \"$dir\"!"
    fi
}

# print an available file path to standard output given a prefix
print_available_file () {
    local prefix="$1"
    local tmp="$prefix"
    if [ -e "$prefix" ]; then
        prefix="${tmp}_$(date '+%F_%T')" # add _YYYY-MM-DD_hh:mm:ss
        tmp="$prefix"
        while [ -e "$tmp" ]; do
            tmp="${prefix}_$(date '+%N')" # add _nanoseconds
        done
    fi
    echo "$tmp"
}

# return true iff the given string is a valid word (only A-Z, 0-9 and _ characters)
is_word () {
    local string="$1";
    local tmp="${string#*[!a-zA-Z0-9_]}" # complementary class
    [ ${#string} -eq ${#tmp} ]
}

# return true iff the given string is valid and not empty word
is_word_nonempty () { [ -n "$1" ] && is_word "$1" ; }

# return true iff the given string is an integer
is_int () {
    local string="$1"
    [ "$string" -ge 0 -o "$string" -lt 0 ] 2> /dev/null # prevent messages to standard error (if $string is not an integer)
}

# return true iff the given string is an unsigned integer
is_u_int () {
    local string="$1"
    [ "$string" -ge 0 ] 2> /dev/null # prevent messages to standard error (if $string is not an integer)
}

# return true iff the given string is an integer greater than zero
is_int_gt0 () {
    local string="$1"
    [ "$string" -gt 0 ] 2> /dev/null # prevent messages to standard error (if $string is not an integer)
}

# return true iff the given string is an integer between 0 and 255
is_byte () {
    local string="$1"
    [ "$string" -ge 0 -a "$string" -le 255 ] 2> /dev/null
}

# retrun true iff the given string is a probability (float in [0,1])
is_probability () {
    local num="$1"
    local dec="${num#*.}"
    local int
    if [ ${#dec} -eq ${#int} ]; then
        dec=""
	int="$num"
    else
        int="${num%.$dec}"
    fi
    [ "$num" = 0 -o "$num" = 1 -o \( "$int" -ge 0 -a "$int" -le 1 -a -z "$dec" \) ] 2> /dev/null ||
    [ \( "$int" -eq 0 -a "$dec" -ge 0 \) -o \( "$int" -eq 1 -a "$dec" -eq 0 \) ] 2> /dev/null
}

# return true iff the given string is an IPv4 address
is_IPv4 () {
    local ip="$1"
    local retval=1
    local count=0
    local tmp
    while [ -n "$ip" ]; do
        tmp="$ip"
        ip="${ip#*.}"
        if [ "$tmp" = "$ip" ]; then
            ip=""
        fi
        tmp="${tmp%.$ip}"
        if ! is_byte "$tmp"; then
            count=-1
            break
        fi
        count=$((count + 1))
    done
    if [ "$count" -eq 4 ]; then
        retval=0
    fi
    return "$retval"
}

# print the numeric value of a string (removing useless characters) or 0 for wrong types
# (it prevents some errors with gnuplot)
print_numeric () {
    local num="${1%.}"
    local dec="${num#*.}"
    local dec2
    if [ ${#num} -eq ${#dec} ] || ! is_int "$dec"; then
        # no decimal
        dec=
    else
	# remove useless 0 from decimal characters
        num="${num%.$dec}"
	dec2="${dec%0}"
	while [ ${#dec} -ne ${#dec2} ]; do
	    dec="$dec2"
	    dec2="${dec%0}"
        done
    fi
    # use 0 as default value for wrong types
    if ! is_int "$num"; then
        num=0
    fi
    # output (the dot is printed only if there is a decimal)
    echo "${num}${dec:+.$dec}"
}

# ask confirm to the user
confirm () {
    local prompt="${1:-Confirm}"
    local var
    echo -n "${prompt}? [Y/*] "
    read var
    [ "$var" = 'Y' -o "$var" = 'y' ] # return true iff the answer is Y or y
}


### check

which sudo > /dev/null ||
    E_FATAL 'sudo command not found!'
